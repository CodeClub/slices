require 'spec_helper'

describe Asset, "paperclip" do
  use_extended_style

  let :asset do
    Asset.make file: file_fixture
  end

  let :pdf_asset do
    Asset.make file: file_fixture('test.pdf')
  end

  context "on creating an image asset" do

    it "stores the file type" do
      asset.file_content_type.should eq 'image/jpeg'
    end

    it "stores the file size" do
      asset.file_file_size.should eq 5545
    end

    it "stores the fingerprint" do
      asset.file_fingerprint.should eq 'ca05197526f33a39b871bd5eda640182'
    end

    it "generates an admin thumbnail for the uploaded file" do
      asset.file.exists?(:admin).should be_true
    end

    it "does not generate the extended style for the uploaded file" do
      asset.file.exists?(:extended).should be_false
    end

    it "stores the admin dimensions" do
      asset.file_dimensions.should include 'admin' => '180x180'
    end

  end

  context "on creating a pdf asset" do

    it "is valid" do
      pdf_asset.should be_valid
    end

  end

  context "#admin_image_url" do
    it "is nil for non-image assets" do
      pdf_asset.admin_image_url.should be_nil
    end

    it "is the same as url_for(:admin) for image assets" do
      asset.admin_image_url.should eq asset.url_for(:admin)
    end
  end

  context "#url_for" do
    it "returns a url for existing jobs as a symbol" do
      asset.url_for(:admin).should match /.*\/admin\/lady_bird\.jpg/
    end

    it "returns a url for existing jobs as a string" do
      asset.url_for('admin').should match /.*\/admin\/lady_bird\.jpg/
    end

    it "returns a url for non-autogenerated jobs" do
      asset.url_for(:extended).should match /.*\/extended\/lady_bird\.jpg/
    end

    it "processes the style if nescessary" do
      asset.should_receive(:reprocess_for).with(:extended)
      asset.url_for(:extended)
    end
  end

  context "#dimensions_for" do

    let :asset_with_dimensions do
      Asset.new(file_dimensions: { 'extended' => '1x1' } )
    end

    it "returns the dimensions of the asset" do
      asset_with_dimensions.should_receive(:reprocess_for).with(:extended)
      asset_with_dimensions.dimensions_for(:extended).should eq '1x1'
    end

    it "processes the style if nescessary" do
      asset_with_dimensions.should_receive(:reprocess_for).with(:extended)
      asset_with_dimensions.dimensions_for(:extended)
    end
  end

  context "#reprocess_for!" do

    it "deletes the existing style" do
      asset.url_for(:extended)
      asset.file.should_receive(:flush_deletes).at_least(:once)
      asset.reprocess_for!(:extended)
    end

    it "processes the style" do
      asset.reprocess_for(:extended)
      asset.file_dimensions = {}

      asset.should_receive(:reprocess_for).with(:extended)
      asset.reprocess_for!(:extended)

      asset.file_dimensions.should_not include 'extended'
    end

  end

  context "#reprocess_for" do

    it "returns nil for missing images" do
      asset.file.should_receive(:reprocess!).and_raise(Errno::ENOENT)
      asset.reprocess_for!(:extended).should be_nil
    end

    it "returns nil for invalid images" do
      asset.file.should_receive(:reprocess!).and_raise(Paperclip::Errors::NotIdentifiedByImageMagickError)
      asset.reprocess_for!(:extended).should be_nil
    end

    it "returns nil for an invalid style" do
      Asset.new.dimensions_for(:missing_style).should be_nil
    end

    context "with unprocessed style" do
      it "persists the dimensions on the asset" do
        asset.should_receive(:save)
        asset.reprocess_for(:extended)
        asset.file_dimensions['extended'].should eq '60x60'
      end

      it "generates a resized image file" do
        asset.file.exists?(:extended).should be_false
        asset.dimensions_for(:extended)

        asset.file.exists?(:extended).should be_true
      end

    end

    context "with an already processed style" do

      it "does not processes the style" do
        asset = Asset.new(file_dimensions: { 'extended' => '1x1'} )
        asset.file.should_not_receive(:reprocess!)
        asset.reprocess_for(:extended)
      end

    end

    context "with an existing file" do

      it "processes the style" do
        asset = Asset.new(file_dimensions: {} )
        asset.file.stub(exists?: true)
        asset.file.should_receive(:reprocess!)
        asset.reprocess_for(:extended)
      end

    end
  end

  context "#reset_file_dimensions!" do

    it "is called when an asset is replaced" do
      asset.should_receive(:reset_file_dimensions!)
      asset.update_attributes(file: file_fixture('invalid_colour_profile.jpg'))
    end

    it "is not called when an image style is procesed" do
      asset.should_not_receive(:reset_file_dimensions!)
      asset.reprocess_for!(:extended)
    end

    it "deletes all stored dimensions which aren't admin and original" do
      orginal_dimensions = {
        'original' => '1000x1000',
        'admin'    => '180x180',
      }
      dimensions = orginal_dimensions.merge({
        'extended' => '1x1'
      })
      asset = Asset.new(file_dimensions: dimensions)
      asset.reset_file_dimensions!
      asset.file_dimensions.should eq orginal_dimensions
    end
  end

end


